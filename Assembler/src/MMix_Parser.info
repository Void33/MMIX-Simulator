-----------------------------------------------------------------------------
Info file generated by Happy Version 1.19.0 from MMix_Parser.y
-----------------------------------------------------------------------------


-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_parseFile -> Program                        (0)
	Program -> AssignmentLines                         (1)
	AssignmentLines ->                                 (2)
	AssignmentLines -> AssignmentLines AssignmentLine   (3)
	AssignmentLine -> OP_CODE Ops                      (4)
	AssignmentLine -> Identifier PI                    (5)
	AssignmentLine -> Identifier OP_CODE Ops           (6)
	AssignmentLine -> PI                               (7)
	Ops -> OperatorElement                             (8)
	Ops -> Ops COMMA OperatorElement                   (9)
	OperatorElement -> HALT                            (10)
	OperatorElement -> FPUTS                           (11)
	OperatorElement -> STDOUT                          (12)
	OperatorElement -> REG                             (13)
	OperatorElement -> FORWARD                         (14)
	OperatorElement -> BACKWARD                        (15)
	OperatorElement -> Expression                      (16)
	Identifier -> ID                                   (17)
	Identifier -> LOCAL_LABEL                          (18)
	PI -> LOC Expression                               (19)
	PI -> GREG Expression                              (20)
	PI -> SET OperatorElement COMMA OperatorElement    (21)
	PI -> BYTE Byte_Array                              (22)
	PI -> WYDE Byte_Array                              (23)
	PI -> TETRA Byte_Array                             (24)
	PI -> OCTA Byte_Array                              (25)
	PI -> IS INT                                       (26)
	PI -> IS REG                                       (27)
	PI -> IS Identifier                                (28)
	Byte_Array -> STR                                  (29)
	Byte_Array -> HEX                                  (30)
	Byte_Array -> BYTE_LIT                             (31)
	Byte_Array -> Byte_Array COMMA STR                 (32)
	Byte_Array -> Byte_Array COMMA BYTE_LIT            (33)
	Byte_Array -> Byte_Array COMMA HEX                 (34)
	GlobalVariables -> DS                              (35)
	Expression -> Term                                 (36)
	Expression -> Expression Weak_Operator Term        (37)
	Term -> Primary_Expression                         (38)
	Term -> Term Strong_Operator Primary_Expression    (39)
	Primary_Expression -> INT                          (40)
	Primary_Expression -> Identifier                   (41)
	Primary_Expression -> BYTE_LIT                     (42)
	Primary_Expression -> AT                           (43)
	Primary_Expression -> HEX                          (44)
	Primary_Expression -> GlobalVariables              (45)
	Primary_Expression -> OPEN Expression CLOSE        (46)
	Strong_Operator -> MULTIPLY                        (47)
	Strong_Operator -> DIVIDE                          (48)
	Weak_Operator -> PLUS                              (49)
	Weak_Operator -> MINUS                             (50)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	OP_CODE        { TOpCode $$ }
	SET            { TSet }
	COMMA          { TComma }
	HALT           { THalt }
	FPUTS          { TFputS }
	STDOUT         { TStdOut }
	BYTE_LIT       { TByteLiteral $$ }
	ID             { TIdentifier $$ }
	REG            { TRegister $$ }
	INT            { TInteger $$ }
	LOCAL_LABEL    { TLocalLabel $$ }
	FORWARD        { TLocalForwardOperand $$ }
	BACKWARD       { TLocalBackwardOperand $$ }
	LOC            { TLOC }
	IS             { TIS }
	WYDE           { TWyde }
	TETRA          { TTetra }
	OCTA           { TOcta }
	GREG           { TGREG }
	PLUS           { TPlus }
	MINUS          { TMinus }
	MULTIPLY       { TMult }
	DIVIDE         { TDivide }
	AT             { TAtSign }
	DS             { TDataSegment }
	BYTE           { TByte }
	STR            { TStringLiteral $$ }
	HEX            { THexLiteral $$ }
	OPEN           { TOpenParen }
	CLOSE          { TCloseParen }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_parseFile rule  0
	Program         rule  1
	AssignmentLines rules 2, 3
	AssignmentLine  rules 4, 5, 6, 7
	Ops             rules 8, 9
	OperatorElement rules 10, 11, 12, 13, 14, 15, 16
	Identifier      rules 17, 18
	PI              rules 19, 20, 21, 22, 23, 24, 25, 26, 27, 28
	Byte_Array      rules 29, 30, 31, 32, 33, 34
	GlobalVariables rule  35
	Expression      rules 36, 37
	Term            rules 38, 39
	Primary_Expression rules 40, 41, 42, 43, 44, 45, 46
	Strong_Operator rules 47, 48
	Weak_Operator   rules 49, 50

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0


	OP_CODE        reduce using rule 2
	SET            reduce using rule 2
	ID             reduce using rule 2
	LOCAL_LABEL    reduce using rule 2
	LOC            reduce using rule 2
	IS             reduce using rule 2
	WYDE           reduce using rule 2
	TETRA          reduce using rule 2
	OCTA           reduce using rule 2
	GREG           reduce using rule 2
	BYTE           reduce using rule 2
	%eof           reduce using rule 2

	Program        goto state 3
	AssignmentLinesgoto state 2

State 1



	AssignmentLinesgoto state 2

State 2

	Program -> AssignmentLines .                        (rule 1)
	AssignmentLines -> AssignmentLines . AssignmentLine    (rule 3)

	OP_CODE        shift, and enter state 7
	SET            shift, and enter state 8
	ID             shift, and enter state 9
	LOCAL_LABEL    shift, and enter state 10
	LOC            shift, and enter state 11
	IS             shift, and enter state 12
	WYDE           shift, and enter state 13
	TETRA          shift, and enter state 14
	OCTA           shift, and enter state 15
	GREG           shift, and enter state 16
	BYTE           shift, and enter state 17
	%eof           reduce using rule 1

	AssignmentLine goto state 4
	Identifier     goto state 5
	PI             goto state 6

State 3

	%start_parseFile -> Program .                       (rule 0)

	%eof           accept


State 4

	AssignmentLines -> AssignmentLines AssignmentLine .    (rule 3)

	OP_CODE        reduce using rule 3
	SET            reduce using rule 3
	ID             reduce using rule 3
	LOCAL_LABEL    reduce using rule 3
	LOC            reduce using rule 3
	IS             reduce using rule 3
	WYDE           reduce using rule 3
	TETRA          reduce using rule 3
	OCTA           reduce using rule 3
	GREG           reduce using rule 3
	BYTE           reduce using rule 3
	%eof           reduce using rule 3


State 5

	AssignmentLine -> Identifier . PI                   (rule 5)
	AssignmentLine -> Identifier . OP_CODE Ops          (rule 6)

	OP_CODE        shift, and enter state 51
	SET            shift, and enter state 8
	LOC            shift, and enter state 11
	IS             shift, and enter state 12
	WYDE           shift, and enter state 13
	TETRA          shift, and enter state 14
	OCTA           shift, and enter state 15
	GREG           shift, and enter state 16
	BYTE           shift, and enter state 17

	PI             goto state 50

State 6

	AssignmentLine -> PI .                              (rule 7)

	OP_CODE        reduce using rule 7
	SET            reduce using rule 7
	ID             reduce using rule 7
	LOCAL_LABEL    reduce using rule 7
	LOC            reduce using rule 7
	IS             reduce using rule 7
	WYDE           reduce using rule 7
	TETRA          reduce using rule 7
	OCTA           reduce using rule 7
	GREG           reduce using rule 7
	BYTE           reduce using rule 7
	%eof           reduce using rule 7


State 7

	AssignmentLine -> OP_CODE . Ops                     (rule 4)

	HALT           shift, and enter state 42
	FPUTS          shift, and enter state 43
	STDOUT         shift, and enter state 44
	BYTE_LIT       shift, and enter state 27
	ID             shift, and enter state 9
	REG            shift, and enter state 45
	INT            shift, and enter state 28
	LOCAL_LABEL    shift, and enter state 10
	FORWARD        shift, and enter state 46
	BACKWARD       shift, and enter state 47
	AT             shift, and enter state 29
	DS             shift, and enter state 30
	HEX            shift, and enter state 31
	OPEN           shift, and enter state 32

	Ops            goto state 48
	OperatorElementgoto state 49
	Identifier     goto state 22
	GlobalVariablesgoto state 23
	Expression     goto state 41
	Term           goto state 25
	Primary_Expressiongoto state 26

State 8

	PI -> SET . OperatorElement COMMA OperatorElement    (rule 21)

	HALT           shift, and enter state 42
	FPUTS          shift, and enter state 43
	STDOUT         shift, and enter state 44
	BYTE_LIT       shift, and enter state 27
	ID             shift, and enter state 9
	REG            shift, and enter state 45
	INT            shift, and enter state 28
	LOCAL_LABEL    shift, and enter state 10
	FORWARD        shift, and enter state 46
	BACKWARD       shift, and enter state 47
	AT             shift, and enter state 29
	DS             shift, and enter state 30
	HEX            shift, and enter state 31
	OPEN           shift, and enter state 32

	OperatorElementgoto state 40
	Identifier     goto state 22
	GlobalVariablesgoto state 23
	Expression     goto state 41
	Term           goto state 25
	Primary_Expressiongoto state 26

State 9

	Identifier -> ID .                                  (rule 17)

	OP_CODE        reduce using rule 17
	SET            reduce using rule 17
	COMMA          reduce using rule 17
	ID             reduce using rule 17
	LOCAL_LABEL    reduce using rule 17
	LOC            reduce using rule 17
	IS             reduce using rule 17
	WYDE           reduce using rule 17
	TETRA          reduce using rule 17
	OCTA           reduce using rule 17
	GREG           reduce using rule 17
	PLUS           reduce using rule 17
	MINUS          reduce using rule 17
	MULTIPLY       reduce using rule 17
	DIVIDE         reduce using rule 17
	BYTE           reduce using rule 17
	CLOSE          reduce using rule 17
	%eof           reduce using rule 17


State 10

	Identifier -> LOCAL_LABEL .                         (rule 18)

	OP_CODE        reduce using rule 18
	SET            reduce using rule 18
	COMMA          reduce using rule 18
	ID             reduce using rule 18
	LOCAL_LABEL    reduce using rule 18
	LOC            reduce using rule 18
	IS             reduce using rule 18
	WYDE           reduce using rule 18
	TETRA          reduce using rule 18
	OCTA           reduce using rule 18
	GREG           reduce using rule 18
	PLUS           reduce using rule 18
	MINUS          reduce using rule 18
	MULTIPLY       reduce using rule 18
	DIVIDE         reduce using rule 18
	BYTE           reduce using rule 18
	CLOSE          reduce using rule 18
	%eof           reduce using rule 18


State 11

	PI -> LOC . Expression                              (rule 19)

	BYTE_LIT       shift, and enter state 27
	ID             shift, and enter state 9
	INT            shift, and enter state 28
	LOCAL_LABEL    shift, and enter state 10
	AT             shift, and enter state 29
	DS             shift, and enter state 30
	HEX            shift, and enter state 31
	OPEN           shift, and enter state 32

	Identifier     goto state 22
	GlobalVariablesgoto state 23
	Expression     goto state 39
	Term           goto state 25
	Primary_Expressiongoto state 26

State 12

	PI -> IS . INT                                      (rule 26)
	PI -> IS . REG                                      (rule 27)
	PI -> IS . Identifier                               (rule 28)

	ID             shift, and enter state 9
	REG            shift, and enter state 37
	INT            shift, and enter state 38
	LOCAL_LABEL    shift, and enter state 10

	Identifier     goto state 36

State 13

	PI -> WYDE . Byte_Array                             (rule 23)

	BYTE_LIT       shift, and enter state 19
	STR            shift, and enter state 20
	HEX            shift, and enter state 21

	Byte_Array     goto state 35

State 14

	PI -> TETRA . Byte_Array                            (rule 24)

	BYTE_LIT       shift, and enter state 19
	STR            shift, and enter state 20
	HEX            shift, and enter state 21

	Byte_Array     goto state 34

State 15

	PI -> OCTA . Byte_Array                             (rule 25)

	BYTE_LIT       shift, and enter state 19
	STR            shift, and enter state 20
	HEX            shift, and enter state 21

	Byte_Array     goto state 33

State 16

	PI -> GREG . Expression                             (rule 20)

	BYTE_LIT       shift, and enter state 27
	ID             shift, and enter state 9
	INT            shift, and enter state 28
	LOCAL_LABEL    shift, and enter state 10
	AT             shift, and enter state 29
	DS             shift, and enter state 30
	HEX            shift, and enter state 31
	OPEN           shift, and enter state 32

	Identifier     goto state 22
	GlobalVariablesgoto state 23
	Expression     goto state 24
	Term           goto state 25
	Primary_Expressiongoto state 26

State 17

	PI -> BYTE . Byte_Array                             (rule 22)

	BYTE_LIT       shift, and enter state 19
	STR            shift, and enter state 20
	HEX            shift, and enter state 21

	Byte_Array     goto state 18

State 18

	PI -> BYTE Byte_Array .                             (rule 22)
	Byte_Array -> Byte_Array . COMMA STR                (rule 32)
	Byte_Array -> Byte_Array . COMMA BYTE_LIT           (rule 33)
	Byte_Array -> Byte_Array . COMMA HEX                (rule 34)

	OP_CODE        reduce using rule 22
	SET            reduce using rule 22
	COMMA          shift, and enter state 58
	ID             reduce using rule 22
	LOCAL_LABEL    reduce using rule 22
	LOC            reduce using rule 22
	IS             reduce using rule 22
	WYDE           reduce using rule 22
	TETRA          reduce using rule 22
	OCTA           reduce using rule 22
	GREG           reduce using rule 22
	BYTE           reduce using rule 22
	%eof           reduce using rule 22


State 19

	Byte_Array -> BYTE_LIT .                            (rule 31)

	OP_CODE        reduce using rule 31
	SET            reduce using rule 31
	COMMA          reduce using rule 31
	ID             reduce using rule 31
	LOCAL_LABEL    reduce using rule 31
	LOC            reduce using rule 31
	IS             reduce using rule 31
	WYDE           reduce using rule 31
	TETRA          reduce using rule 31
	OCTA           reduce using rule 31
	GREG           reduce using rule 31
	BYTE           reduce using rule 31
	%eof           reduce using rule 31


State 20

	Byte_Array -> STR .                                 (rule 29)

	OP_CODE        reduce using rule 29
	SET            reduce using rule 29
	COMMA          reduce using rule 29
	ID             reduce using rule 29
	LOCAL_LABEL    reduce using rule 29
	LOC            reduce using rule 29
	IS             reduce using rule 29
	WYDE           reduce using rule 29
	TETRA          reduce using rule 29
	OCTA           reduce using rule 29
	GREG           reduce using rule 29
	BYTE           reduce using rule 29
	%eof           reduce using rule 29


State 21

	Byte_Array -> HEX .                                 (rule 30)

	OP_CODE        reduce using rule 30
	SET            reduce using rule 30
	COMMA          reduce using rule 30
	ID             reduce using rule 30
	LOCAL_LABEL    reduce using rule 30
	LOC            reduce using rule 30
	IS             reduce using rule 30
	WYDE           reduce using rule 30
	TETRA          reduce using rule 30
	OCTA           reduce using rule 30
	GREG           reduce using rule 30
	BYTE           reduce using rule 30
	%eof           reduce using rule 30


State 22

	Primary_Expression -> Identifier .                  (rule 41)

	OP_CODE        reduce using rule 41
	SET            reduce using rule 41
	COMMA          reduce using rule 41
	ID             reduce using rule 41
	LOCAL_LABEL    reduce using rule 41
	LOC            reduce using rule 41
	IS             reduce using rule 41
	WYDE           reduce using rule 41
	TETRA          reduce using rule 41
	OCTA           reduce using rule 41
	GREG           reduce using rule 41
	PLUS           reduce using rule 41
	MINUS          reduce using rule 41
	MULTIPLY       reduce using rule 41
	DIVIDE         reduce using rule 41
	BYTE           reduce using rule 41
	CLOSE          reduce using rule 41
	%eof           reduce using rule 41


State 23

	Primary_Expression -> GlobalVariables .             (rule 45)

	OP_CODE        reduce using rule 45
	SET            reduce using rule 45
	COMMA          reduce using rule 45
	ID             reduce using rule 45
	LOCAL_LABEL    reduce using rule 45
	LOC            reduce using rule 45
	IS             reduce using rule 45
	WYDE           reduce using rule 45
	TETRA          reduce using rule 45
	OCTA           reduce using rule 45
	GREG           reduce using rule 45
	PLUS           reduce using rule 45
	MINUS          reduce using rule 45
	MULTIPLY       reduce using rule 45
	DIVIDE         reduce using rule 45
	BYTE           reduce using rule 45
	CLOSE          reduce using rule 45
	%eof           reduce using rule 45


State 24

	PI -> GREG Expression .                             (rule 20)
	Expression -> Expression . Weak_Operator Term       (rule 37)

	OP_CODE        reduce using rule 20
	SET            reduce using rule 20
	ID             reduce using rule 20
	LOCAL_LABEL    reduce using rule 20
	LOC            reduce using rule 20
	IS             reduce using rule 20
	WYDE           reduce using rule 20
	TETRA          reduce using rule 20
	OCTA           reduce using rule 20
	GREG           reduce using rule 20
	PLUS           shift, and enter state 55
	MINUS          shift, and enter state 56
	BYTE           reduce using rule 20
	%eof           reduce using rule 20

	Weak_Operator  goto state 54

State 25

	Expression -> Term .                                (rule 36)
	Term -> Term . Strong_Operator Primary_Expression    (rule 39)

	OP_CODE        reduce using rule 36
	SET            reduce using rule 36
	COMMA          reduce using rule 36
	ID             reduce using rule 36
	LOCAL_LABEL    reduce using rule 36
	LOC            reduce using rule 36
	IS             reduce using rule 36
	WYDE           reduce using rule 36
	TETRA          reduce using rule 36
	OCTA           reduce using rule 36
	GREG           reduce using rule 36
	PLUS           reduce using rule 36
	MINUS          reduce using rule 36
	MULTIPLY       shift, and enter state 61
	DIVIDE         shift, and enter state 62
	BYTE           reduce using rule 36
	CLOSE          reduce using rule 36
	%eof           reduce using rule 36

	Strong_Operatorgoto state 60

State 26

	Term -> Primary_Expression .                        (rule 38)

	OP_CODE        reduce using rule 38
	SET            reduce using rule 38
	COMMA          reduce using rule 38
	ID             reduce using rule 38
	LOCAL_LABEL    reduce using rule 38
	LOC            reduce using rule 38
	IS             reduce using rule 38
	WYDE           reduce using rule 38
	TETRA          reduce using rule 38
	OCTA           reduce using rule 38
	GREG           reduce using rule 38
	PLUS           reduce using rule 38
	MINUS          reduce using rule 38
	MULTIPLY       reduce using rule 38
	DIVIDE         reduce using rule 38
	BYTE           reduce using rule 38
	CLOSE          reduce using rule 38
	%eof           reduce using rule 38


State 27

	Primary_Expression -> BYTE_LIT .                    (rule 42)

	OP_CODE        reduce using rule 42
	SET            reduce using rule 42
	COMMA          reduce using rule 42
	ID             reduce using rule 42
	LOCAL_LABEL    reduce using rule 42
	LOC            reduce using rule 42
	IS             reduce using rule 42
	WYDE           reduce using rule 42
	TETRA          reduce using rule 42
	OCTA           reduce using rule 42
	GREG           reduce using rule 42
	PLUS           reduce using rule 42
	MINUS          reduce using rule 42
	MULTIPLY       reduce using rule 42
	DIVIDE         reduce using rule 42
	BYTE           reduce using rule 42
	CLOSE          reduce using rule 42
	%eof           reduce using rule 42


State 28

	Primary_Expression -> INT .                         (rule 40)

	OP_CODE        reduce using rule 40
	SET            reduce using rule 40
	COMMA          reduce using rule 40
	ID             reduce using rule 40
	LOCAL_LABEL    reduce using rule 40
	LOC            reduce using rule 40
	IS             reduce using rule 40
	WYDE           reduce using rule 40
	TETRA          reduce using rule 40
	OCTA           reduce using rule 40
	GREG           reduce using rule 40
	PLUS           reduce using rule 40
	MINUS          reduce using rule 40
	MULTIPLY       reduce using rule 40
	DIVIDE         reduce using rule 40
	BYTE           reduce using rule 40
	CLOSE          reduce using rule 40
	%eof           reduce using rule 40


State 29

	Primary_Expression -> AT .                          (rule 43)

	OP_CODE        reduce using rule 43
	SET            reduce using rule 43
	COMMA          reduce using rule 43
	ID             reduce using rule 43
	LOCAL_LABEL    reduce using rule 43
	LOC            reduce using rule 43
	IS             reduce using rule 43
	WYDE           reduce using rule 43
	TETRA          reduce using rule 43
	OCTA           reduce using rule 43
	GREG           reduce using rule 43
	PLUS           reduce using rule 43
	MINUS          reduce using rule 43
	MULTIPLY       reduce using rule 43
	DIVIDE         reduce using rule 43
	BYTE           reduce using rule 43
	CLOSE          reduce using rule 43
	%eof           reduce using rule 43


State 30

	GlobalVariables -> DS .                             (rule 35)

	OP_CODE        reduce using rule 35
	SET            reduce using rule 35
	COMMA          reduce using rule 35
	ID             reduce using rule 35
	LOCAL_LABEL    reduce using rule 35
	LOC            reduce using rule 35
	IS             reduce using rule 35
	WYDE           reduce using rule 35
	TETRA          reduce using rule 35
	OCTA           reduce using rule 35
	GREG           reduce using rule 35
	PLUS           reduce using rule 35
	MINUS          reduce using rule 35
	MULTIPLY       reduce using rule 35
	DIVIDE         reduce using rule 35
	BYTE           reduce using rule 35
	CLOSE          reduce using rule 35
	%eof           reduce using rule 35


State 31

	Primary_Expression -> HEX .                         (rule 44)

	OP_CODE        reduce using rule 44
	SET            reduce using rule 44
	COMMA          reduce using rule 44
	ID             reduce using rule 44
	LOCAL_LABEL    reduce using rule 44
	LOC            reduce using rule 44
	IS             reduce using rule 44
	WYDE           reduce using rule 44
	TETRA          reduce using rule 44
	OCTA           reduce using rule 44
	GREG           reduce using rule 44
	PLUS           reduce using rule 44
	MINUS          reduce using rule 44
	MULTIPLY       reduce using rule 44
	DIVIDE         reduce using rule 44
	BYTE           reduce using rule 44
	CLOSE          reduce using rule 44
	%eof           reduce using rule 44


State 32

	Primary_Expression -> OPEN . Expression CLOSE       (rule 46)

	BYTE_LIT       shift, and enter state 27
	ID             shift, and enter state 9
	INT            shift, and enter state 28
	LOCAL_LABEL    shift, and enter state 10
	AT             shift, and enter state 29
	DS             shift, and enter state 30
	HEX            shift, and enter state 31
	OPEN           shift, and enter state 32

	Identifier     goto state 22
	GlobalVariablesgoto state 23
	Expression     goto state 59
	Term           goto state 25
	Primary_Expressiongoto state 26

State 33

	PI -> OCTA Byte_Array .                             (rule 25)
	Byte_Array -> Byte_Array . COMMA STR                (rule 32)
	Byte_Array -> Byte_Array . COMMA BYTE_LIT           (rule 33)
	Byte_Array -> Byte_Array . COMMA HEX                (rule 34)

	OP_CODE        reduce using rule 25
	SET            reduce using rule 25
	COMMA          shift, and enter state 58
	ID             reduce using rule 25
	LOCAL_LABEL    reduce using rule 25
	LOC            reduce using rule 25
	IS             reduce using rule 25
	WYDE           reduce using rule 25
	TETRA          reduce using rule 25
	OCTA           reduce using rule 25
	GREG           reduce using rule 25
	BYTE           reduce using rule 25
	%eof           reduce using rule 25


State 34

	PI -> TETRA Byte_Array .                            (rule 24)
	Byte_Array -> Byte_Array . COMMA STR                (rule 32)
	Byte_Array -> Byte_Array . COMMA BYTE_LIT           (rule 33)
	Byte_Array -> Byte_Array . COMMA HEX                (rule 34)

	OP_CODE        reduce using rule 24
	SET            reduce using rule 24
	COMMA          shift, and enter state 58
	ID             reduce using rule 24
	LOCAL_LABEL    reduce using rule 24
	LOC            reduce using rule 24
	IS             reduce using rule 24
	WYDE           reduce using rule 24
	TETRA          reduce using rule 24
	OCTA           reduce using rule 24
	GREG           reduce using rule 24
	BYTE           reduce using rule 24
	%eof           reduce using rule 24


State 35

	PI -> WYDE Byte_Array .                             (rule 23)
	Byte_Array -> Byte_Array . COMMA STR                (rule 32)
	Byte_Array -> Byte_Array . COMMA BYTE_LIT           (rule 33)
	Byte_Array -> Byte_Array . COMMA HEX                (rule 34)

	OP_CODE        reduce using rule 23
	SET            reduce using rule 23
	COMMA          shift, and enter state 58
	ID             reduce using rule 23
	LOCAL_LABEL    reduce using rule 23
	LOC            reduce using rule 23
	IS             reduce using rule 23
	WYDE           reduce using rule 23
	TETRA          reduce using rule 23
	OCTA           reduce using rule 23
	GREG           reduce using rule 23
	BYTE           reduce using rule 23
	%eof           reduce using rule 23


State 36

	PI -> IS Identifier .                               (rule 28)

	OP_CODE        reduce using rule 28
	SET            reduce using rule 28
	ID             reduce using rule 28
	LOCAL_LABEL    reduce using rule 28
	LOC            reduce using rule 28
	IS             reduce using rule 28
	WYDE           reduce using rule 28
	TETRA          reduce using rule 28
	OCTA           reduce using rule 28
	GREG           reduce using rule 28
	BYTE           reduce using rule 28
	%eof           reduce using rule 28


State 37

	PI -> IS REG .                                      (rule 27)

	OP_CODE        reduce using rule 27
	SET            reduce using rule 27
	ID             reduce using rule 27
	LOCAL_LABEL    reduce using rule 27
	LOC            reduce using rule 27
	IS             reduce using rule 27
	WYDE           reduce using rule 27
	TETRA          reduce using rule 27
	OCTA           reduce using rule 27
	GREG           reduce using rule 27
	BYTE           reduce using rule 27
	%eof           reduce using rule 27


State 38

	PI -> IS INT .                                      (rule 26)

	OP_CODE        reduce using rule 26
	SET            reduce using rule 26
	ID             reduce using rule 26
	LOCAL_LABEL    reduce using rule 26
	LOC            reduce using rule 26
	IS             reduce using rule 26
	WYDE           reduce using rule 26
	TETRA          reduce using rule 26
	OCTA           reduce using rule 26
	GREG           reduce using rule 26
	BYTE           reduce using rule 26
	%eof           reduce using rule 26


State 39

	PI -> LOC Expression .                              (rule 19)
	Expression -> Expression . Weak_Operator Term       (rule 37)

	OP_CODE        reduce using rule 19
	SET            reduce using rule 19
	ID             reduce using rule 19
	LOCAL_LABEL    reduce using rule 19
	LOC            reduce using rule 19
	IS             reduce using rule 19
	WYDE           reduce using rule 19
	TETRA          reduce using rule 19
	OCTA           reduce using rule 19
	GREG           reduce using rule 19
	PLUS           shift, and enter state 55
	MINUS          shift, and enter state 56
	BYTE           reduce using rule 19
	%eof           reduce using rule 19

	Weak_Operator  goto state 54

State 40

	PI -> SET OperatorElement . COMMA OperatorElement    (rule 21)

	COMMA          shift, and enter state 57


State 41

	OperatorElement -> Expression .                     (rule 16)
	Expression -> Expression . Weak_Operator Term       (rule 37)

	OP_CODE        reduce using rule 16
	SET            reduce using rule 16
	COMMA          reduce using rule 16
	ID             reduce using rule 16
	LOCAL_LABEL    reduce using rule 16
	LOC            reduce using rule 16
	IS             reduce using rule 16
	WYDE           reduce using rule 16
	TETRA          reduce using rule 16
	OCTA           reduce using rule 16
	GREG           reduce using rule 16
	PLUS           shift, and enter state 55
	MINUS          shift, and enter state 56
	BYTE           reduce using rule 16
	%eof           reduce using rule 16

	Weak_Operator  goto state 54

State 42

	OperatorElement -> HALT .                           (rule 10)

	OP_CODE        reduce using rule 10
	SET            reduce using rule 10
	COMMA          reduce using rule 10
	ID             reduce using rule 10
	LOCAL_LABEL    reduce using rule 10
	LOC            reduce using rule 10
	IS             reduce using rule 10
	WYDE           reduce using rule 10
	TETRA          reduce using rule 10
	OCTA           reduce using rule 10
	GREG           reduce using rule 10
	BYTE           reduce using rule 10
	%eof           reduce using rule 10


State 43

	OperatorElement -> FPUTS .                          (rule 11)

	OP_CODE        reduce using rule 11
	SET            reduce using rule 11
	COMMA          reduce using rule 11
	ID             reduce using rule 11
	LOCAL_LABEL    reduce using rule 11
	LOC            reduce using rule 11
	IS             reduce using rule 11
	WYDE           reduce using rule 11
	TETRA          reduce using rule 11
	OCTA           reduce using rule 11
	GREG           reduce using rule 11
	BYTE           reduce using rule 11
	%eof           reduce using rule 11


State 44

	OperatorElement -> STDOUT .                         (rule 12)

	OP_CODE        reduce using rule 12
	SET            reduce using rule 12
	COMMA          reduce using rule 12
	ID             reduce using rule 12
	LOCAL_LABEL    reduce using rule 12
	LOC            reduce using rule 12
	IS             reduce using rule 12
	WYDE           reduce using rule 12
	TETRA          reduce using rule 12
	OCTA           reduce using rule 12
	GREG           reduce using rule 12
	BYTE           reduce using rule 12
	%eof           reduce using rule 12


State 45

	OperatorElement -> REG .                            (rule 13)

	OP_CODE        reduce using rule 13
	SET            reduce using rule 13
	COMMA          reduce using rule 13
	ID             reduce using rule 13
	LOCAL_LABEL    reduce using rule 13
	LOC            reduce using rule 13
	IS             reduce using rule 13
	WYDE           reduce using rule 13
	TETRA          reduce using rule 13
	OCTA           reduce using rule 13
	GREG           reduce using rule 13
	BYTE           reduce using rule 13
	%eof           reduce using rule 13


State 46

	OperatorElement -> FORWARD .                        (rule 14)

	OP_CODE        reduce using rule 14
	SET            reduce using rule 14
	COMMA          reduce using rule 14
	ID             reduce using rule 14
	LOCAL_LABEL    reduce using rule 14
	LOC            reduce using rule 14
	IS             reduce using rule 14
	WYDE           reduce using rule 14
	TETRA          reduce using rule 14
	OCTA           reduce using rule 14
	GREG           reduce using rule 14
	BYTE           reduce using rule 14
	%eof           reduce using rule 14


State 47

	OperatorElement -> BACKWARD .                       (rule 15)

	OP_CODE        reduce using rule 15
	SET            reduce using rule 15
	COMMA          reduce using rule 15
	ID             reduce using rule 15
	LOCAL_LABEL    reduce using rule 15
	LOC            reduce using rule 15
	IS             reduce using rule 15
	WYDE           reduce using rule 15
	TETRA          reduce using rule 15
	OCTA           reduce using rule 15
	GREG           reduce using rule 15
	BYTE           reduce using rule 15
	%eof           reduce using rule 15


State 48

	AssignmentLine -> OP_CODE Ops .                     (rule 4)
	Ops -> Ops . COMMA OperatorElement                  (rule 9)

	OP_CODE        reduce using rule 4
	SET            reduce using rule 4
	COMMA          shift, and enter state 53
	ID             reduce using rule 4
	LOCAL_LABEL    reduce using rule 4
	LOC            reduce using rule 4
	IS             reduce using rule 4
	WYDE           reduce using rule 4
	TETRA          reduce using rule 4
	OCTA           reduce using rule 4
	GREG           reduce using rule 4
	BYTE           reduce using rule 4
	%eof           reduce using rule 4


State 49

	Ops -> OperatorElement .                            (rule 8)

	OP_CODE        reduce using rule 8
	SET            reduce using rule 8
	COMMA          reduce using rule 8
	ID             reduce using rule 8
	LOCAL_LABEL    reduce using rule 8
	LOC            reduce using rule 8
	IS             reduce using rule 8
	WYDE           reduce using rule 8
	TETRA          reduce using rule 8
	OCTA           reduce using rule 8
	GREG           reduce using rule 8
	BYTE           reduce using rule 8
	%eof           reduce using rule 8


State 50

	AssignmentLine -> Identifier PI .                   (rule 5)

	OP_CODE        reduce using rule 5
	SET            reduce using rule 5
	ID             reduce using rule 5
	LOCAL_LABEL    reduce using rule 5
	LOC            reduce using rule 5
	IS             reduce using rule 5
	WYDE           reduce using rule 5
	TETRA          reduce using rule 5
	OCTA           reduce using rule 5
	GREG           reduce using rule 5
	BYTE           reduce using rule 5
	%eof           reduce using rule 5


State 51

	AssignmentLine -> Identifier OP_CODE . Ops          (rule 6)

	HALT           shift, and enter state 42
	FPUTS          shift, and enter state 43
	STDOUT         shift, and enter state 44
	BYTE_LIT       shift, and enter state 27
	ID             shift, and enter state 9
	REG            shift, and enter state 45
	INT            shift, and enter state 28
	LOCAL_LABEL    shift, and enter state 10
	FORWARD        shift, and enter state 46
	BACKWARD       shift, and enter state 47
	AT             shift, and enter state 29
	DS             shift, and enter state 30
	HEX            shift, and enter state 31
	OPEN           shift, and enter state 32

	Ops            goto state 52
	OperatorElementgoto state 49
	Identifier     goto state 22
	GlobalVariablesgoto state 23
	Expression     goto state 41
	Term           goto state 25
	Primary_Expressiongoto state 26

State 52

	AssignmentLine -> Identifier OP_CODE Ops .          (rule 6)
	Ops -> Ops . COMMA OperatorElement                  (rule 9)

	OP_CODE        reduce using rule 6
	SET            reduce using rule 6
	COMMA          shift, and enter state 53
	ID             reduce using rule 6
	LOCAL_LABEL    reduce using rule 6
	LOC            reduce using rule 6
	IS             reduce using rule 6
	WYDE           reduce using rule 6
	TETRA          reduce using rule 6
	OCTA           reduce using rule 6
	GREG           reduce using rule 6
	BYTE           reduce using rule 6
	%eof           reduce using rule 6


State 53

	Ops -> Ops COMMA . OperatorElement                  (rule 9)

	HALT           shift, and enter state 42
	FPUTS          shift, and enter state 43
	STDOUT         shift, and enter state 44
	BYTE_LIT       shift, and enter state 27
	ID             shift, and enter state 9
	REG            shift, and enter state 45
	INT            shift, and enter state 28
	LOCAL_LABEL    shift, and enter state 10
	FORWARD        shift, and enter state 46
	BACKWARD       shift, and enter state 47
	AT             shift, and enter state 29
	DS             shift, and enter state 30
	HEX            shift, and enter state 31
	OPEN           shift, and enter state 32

	OperatorElementgoto state 70
	Identifier     goto state 22
	GlobalVariablesgoto state 23
	Expression     goto state 41
	Term           goto state 25
	Primary_Expressiongoto state 26

State 54

	Expression -> Expression Weak_Operator . Term       (rule 37)

	BYTE_LIT       shift, and enter state 27
	ID             shift, and enter state 9
	INT            shift, and enter state 28
	LOCAL_LABEL    shift, and enter state 10
	AT             shift, and enter state 29
	DS             shift, and enter state 30
	HEX            shift, and enter state 31
	OPEN           shift, and enter state 32

	Identifier     goto state 22
	GlobalVariablesgoto state 23
	Term           goto state 69
	Primary_Expressiongoto state 26

State 55

	Weak_Operator -> PLUS .                             (rule 49)

	BYTE_LIT       reduce using rule 49
	ID             reduce using rule 49
	INT            reduce using rule 49
	LOCAL_LABEL    reduce using rule 49
	AT             reduce using rule 49
	DS             reduce using rule 49
	HEX            reduce using rule 49
	OPEN           reduce using rule 49


State 56

	Weak_Operator -> MINUS .                            (rule 50)

	BYTE_LIT       reduce using rule 50
	ID             reduce using rule 50
	INT            reduce using rule 50
	LOCAL_LABEL    reduce using rule 50
	AT             reduce using rule 50
	DS             reduce using rule 50
	HEX            reduce using rule 50
	OPEN           reduce using rule 50


State 57

	PI -> SET OperatorElement COMMA . OperatorElement    (rule 21)

	HALT           shift, and enter state 42
	FPUTS          shift, and enter state 43
	STDOUT         shift, and enter state 44
	BYTE_LIT       shift, and enter state 27
	ID             shift, and enter state 9
	REG            shift, and enter state 45
	INT            shift, and enter state 28
	LOCAL_LABEL    shift, and enter state 10
	FORWARD        shift, and enter state 46
	BACKWARD       shift, and enter state 47
	AT             shift, and enter state 29
	DS             shift, and enter state 30
	HEX            shift, and enter state 31
	OPEN           shift, and enter state 32

	OperatorElementgoto state 68
	Identifier     goto state 22
	GlobalVariablesgoto state 23
	Expression     goto state 41
	Term           goto state 25
	Primary_Expressiongoto state 26

State 58

	Byte_Array -> Byte_Array COMMA . STR                (rule 32)
	Byte_Array -> Byte_Array COMMA . BYTE_LIT           (rule 33)
	Byte_Array -> Byte_Array COMMA . HEX                (rule 34)

	BYTE_LIT       shift, and enter state 65
	STR            shift, and enter state 66
	HEX            shift, and enter state 67


State 59

	Expression -> Expression . Weak_Operator Term       (rule 37)
	Primary_Expression -> OPEN Expression . CLOSE       (rule 46)

	PLUS           shift, and enter state 55
	MINUS          shift, and enter state 56
	CLOSE          shift, and enter state 64

	Weak_Operator  goto state 54

State 60

	Term -> Term Strong_Operator . Primary_Expression    (rule 39)

	BYTE_LIT       shift, and enter state 27
	ID             shift, and enter state 9
	INT            shift, and enter state 28
	LOCAL_LABEL    shift, and enter state 10
	AT             shift, and enter state 29
	DS             shift, and enter state 30
	HEX            shift, and enter state 31
	OPEN           shift, and enter state 32

	Identifier     goto state 22
	GlobalVariablesgoto state 23
	Primary_Expressiongoto state 63

State 61

	Strong_Operator -> MULTIPLY .                       (rule 47)

	BYTE_LIT       reduce using rule 47
	ID             reduce using rule 47
	INT            reduce using rule 47
	LOCAL_LABEL    reduce using rule 47
	AT             reduce using rule 47
	DS             reduce using rule 47
	HEX            reduce using rule 47
	OPEN           reduce using rule 47


State 62

	Strong_Operator -> DIVIDE .                         (rule 48)

	BYTE_LIT       reduce using rule 48
	ID             reduce using rule 48
	INT            reduce using rule 48
	LOCAL_LABEL    reduce using rule 48
	AT             reduce using rule 48
	DS             reduce using rule 48
	HEX            reduce using rule 48
	OPEN           reduce using rule 48


State 63

	Term -> Term Strong_Operator Primary_Expression .    (rule 39)

	OP_CODE        reduce using rule 39
	SET            reduce using rule 39
	COMMA          reduce using rule 39
	ID             reduce using rule 39
	LOCAL_LABEL    reduce using rule 39
	LOC            reduce using rule 39
	IS             reduce using rule 39
	WYDE           reduce using rule 39
	TETRA          reduce using rule 39
	OCTA           reduce using rule 39
	GREG           reduce using rule 39
	PLUS           reduce using rule 39
	MINUS          reduce using rule 39
	MULTIPLY       reduce using rule 39
	DIVIDE         reduce using rule 39
	BYTE           reduce using rule 39
	CLOSE          reduce using rule 39
	%eof           reduce using rule 39


State 64

	Primary_Expression -> OPEN Expression CLOSE .       (rule 46)

	OP_CODE        reduce using rule 46
	SET            reduce using rule 46
	COMMA          reduce using rule 46
	ID             reduce using rule 46
	LOCAL_LABEL    reduce using rule 46
	LOC            reduce using rule 46
	IS             reduce using rule 46
	WYDE           reduce using rule 46
	TETRA          reduce using rule 46
	OCTA           reduce using rule 46
	GREG           reduce using rule 46
	PLUS           reduce using rule 46
	MINUS          reduce using rule 46
	MULTIPLY       reduce using rule 46
	DIVIDE         reduce using rule 46
	BYTE           reduce using rule 46
	CLOSE          reduce using rule 46
	%eof           reduce using rule 46


State 65

	Byte_Array -> Byte_Array COMMA BYTE_LIT .           (rule 33)

	OP_CODE        reduce using rule 33
	SET            reduce using rule 33
	COMMA          reduce using rule 33
	ID             reduce using rule 33
	LOCAL_LABEL    reduce using rule 33
	LOC            reduce using rule 33
	IS             reduce using rule 33
	WYDE           reduce using rule 33
	TETRA          reduce using rule 33
	OCTA           reduce using rule 33
	GREG           reduce using rule 33
	BYTE           reduce using rule 33
	%eof           reduce using rule 33


State 66

	Byte_Array -> Byte_Array COMMA STR .                (rule 32)

	OP_CODE        reduce using rule 32
	SET            reduce using rule 32
	COMMA          reduce using rule 32
	ID             reduce using rule 32
	LOCAL_LABEL    reduce using rule 32
	LOC            reduce using rule 32
	IS             reduce using rule 32
	WYDE           reduce using rule 32
	TETRA          reduce using rule 32
	OCTA           reduce using rule 32
	GREG           reduce using rule 32
	BYTE           reduce using rule 32
	%eof           reduce using rule 32


State 67

	Byte_Array -> Byte_Array COMMA HEX .                (rule 34)

	OP_CODE        reduce using rule 34
	SET            reduce using rule 34
	COMMA          reduce using rule 34
	ID             reduce using rule 34
	LOCAL_LABEL    reduce using rule 34
	LOC            reduce using rule 34
	IS             reduce using rule 34
	WYDE           reduce using rule 34
	TETRA          reduce using rule 34
	OCTA           reduce using rule 34
	GREG           reduce using rule 34
	BYTE           reduce using rule 34
	%eof           reduce using rule 34


State 68

	PI -> SET OperatorElement COMMA OperatorElement .    (rule 21)

	OP_CODE        reduce using rule 21
	SET            reduce using rule 21
	ID             reduce using rule 21
	LOCAL_LABEL    reduce using rule 21
	LOC            reduce using rule 21
	IS             reduce using rule 21
	WYDE           reduce using rule 21
	TETRA          reduce using rule 21
	OCTA           reduce using rule 21
	GREG           reduce using rule 21
	BYTE           reduce using rule 21
	%eof           reduce using rule 21


State 69

	Expression -> Expression Weak_Operator Term .       (rule 37)
	Term -> Term . Strong_Operator Primary_Expression    (rule 39)

	OP_CODE        reduce using rule 37
	SET            reduce using rule 37
	COMMA          reduce using rule 37
	ID             reduce using rule 37
	LOCAL_LABEL    reduce using rule 37
	LOC            reduce using rule 37
	IS             reduce using rule 37
	WYDE           reduce using rule 37
	TETRA          reduce using rule 37
	OCTA           reduce using rule 37
	GREG           reduce using rule 37
	PLUS           reduce using rule 37
	MINUS          reduce using rule 37
	MULTIPLY       shift, and enter state 61
	DIVIDE         shift, and enter state 62
	BYTE           reduce using rule 37
	CLOSE          reduce using rule 37
	%eof           reduce using rule 37

	Strong_Operatorgoto state 60

State 70

	Ops -> Ops COMMA OperatorElement .                  (rule 9)

	OP_CODE        reduce using rule 9
	SET            reduce using rule 9
	COMMA          reduce using rule 9
	ID             reduce using rule 9
	LOCAL_LABEL    reduce using rule 9
	LOC            reduce using rule 9
	IS             reduce using rule 9
	WYDE           reduce using rule 9
	TETRA          reduce using rule 9
	OCTA           reduce using rule 9
	GREG           reduce using rule 9
	BYTE           reduce using rule 9
	%eof           reduce using rule 9


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 51
Number of terminals: 30
Number of non-terminals: 15
Number of states: 71
