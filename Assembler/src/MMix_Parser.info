-----------------------------------------------------------------------------
Info file generated by Happy Version 1.19.0 from MMix_Parser.y
-----------------------------------------------------------------------------


-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_parseFile -> Program                        (0)
	Program -> AssignmentLines                         (1)
	AssignmentLines ->                                 (2)
	AssignmentLines -> AssignmentLines AssignmentLine   (3)
	AssignmentLine -> OP_CODE TwoPartOperatorList      (4)
	AssignmentLine -> OP_CODE ThreePartOperatorList    (5)
	AssignmentLine -> ID PI                            (6)
	AssignmentLine -> ID OP_CODE TwoPartOperatorList   (7)
	AssignmentLine -> ID OP_CODE ThreePartOperatorList   (8)
	AssignmentLine -> PI                               (9)
	ThreePartOperatorList -> OperatorElement COMMA OperatorElement COMMA OperatorElement   (10)
	TwoPartOperatorList -> OperatorElement COMMA Identifier   (11)
	OperatorElement -> BYTE_LIT                        (12)
	OperatorElement -> HALT                            (13)
	OperatorElement -> FPUTS                           (14)
	OperatorElement -> STDOUT                          (15)
	OperatorElement -> REG                             (16)
	OperatorElement -> Identifier                      (17)
	Identifier -> ID                                   (18)
	PI -> LOC GlobalVariables                          (19)
	PI -> LOC HEX                                      (20)
	PI -> GREG AT                                      (21)
	PI -> GREG BYTE_LIT                                (22)
	PI -> BYTE Byte_Array                              (23)
	Byte_Array -> STR                                  (24)
	Byte_Array -> Byte_Array COMMA STR                 (25)
	Byte_Array -> Byte_Array COMMA BYTE_LIT            (26)
	GlobalVariables -> DS                              (27)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	OP_CODE        { TOpCode $$ }
	COMMA          { TComma }
	HALT           { THalt }
	FPUTS          { TFputS }
	STDOUT         { TStdOut }
	BYTE_LIT       { TByteLiteral $$ }
	ID             { TIdentifier $$ }
	REG            { TRegister $$ }
	LOC            { TLOC }
	GREG           { TGREG }
	AT             { TAtSign }
	DS             { TDataSegment }
	BYTE           { TByte }
	STR            { TStringLiteral $$ }
	HEX            { THexLiteral $$ }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_parseFile rule  0
	Program         rule  1
	AssignmentLines rules 2, 3
	AssignmentLine  rules 4, 5, 6, 7, 8, 9
	ThreePartOperatorList rule  10
	TwoPartOperatorList rule  11
	OperatorElement rules 12, 13, 14, 15, 16, 17
	Identifier      rule  18
	PI              rules 19, 20, 21, 22, 23
	Byte_Array      rules 24, 25, 26
	GlobalVariables rule  27

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0


	OP_CODE        reduce using rule 2
	ID             reduce using rule 2
	LOC            reduce using rule 2
	GREG           reduce using rule 2
	BYTE           reduce using rule 2
	%eof           reduce using rule 2

	Program        goto state 3
	AssignmentLinesgoto state 2

State 1



	AssignmentLinesgoto state 2

State 2

	Program -> AssignmentLines .                        (rule 1)
	AssignmentLines -> AssignmentLines . AssignmentLine    (rule 3)

	OP_CODE        shift, and enter state 6
	ID             shift, and enter state 7
	LOC            shift, and enter state 8
	GREG           shift, and enter state 9
	BYTE           shift, and enter state 10
	%eof           reduce using rule 1

	AssignmentLine goto state 4
	PI             goto state 5

State 3

	%start_parseFile -> Program .                       (rule 0)

	%eof           accept


State 4

	AssignmentLines -> AssignmentLines AssignmentLine .    (rule 3)

	OP_CODE        reduce using rule 3
	ID             reduce using rule 3
	LOC            reduce using rule 3
	GREG           reduce using rule 3
	BYTE           reduce using rule 3
	%eof           reduce using rule 3


State 5

	AssignmentLine -> PI .                              (rule 9)

	OP_CODE        reduce using rule 9
	ID             reduce using rule 9
	LOC            reduce using rule 9
	GREG           reduce using rule 9
	BYTE           reduce using rule 9
	%eof           reduce using rule 9


State 6

	AssignmentLine -> OP_CODE . TwoPartOperatorList     (rule 4)
	AssignmentLine -> OP_CODE . ThreePartOperatorList    (rule 5)

	HALT           shift, and enter state 24
	FPUTS          shift, and enter state 25
	STDOUT         shift, and enter state 26
	BYTE_LIT       shift, and enter state 27
	ID             shift, and enter state 28
	REG            shift, and enter state 29

	ThreePartOperatorListgoto state 20
	TwoPartOperatorListgoto state 21
	OperatorElementgoto state 22
	Identifier     goto state 23

State 7

	AssignmentLine -> ID . PI                           (rule 6)
	AssignmentLine -> ID . OP_CODE TwoPartOperatorList    (rule 7)
	AssignmentLine -> ID . OP_CODE ThreePartOperatorList    (rule 8)

	OP_CODE        shift, and enter state 19
	LOC            shift, and enter state 8
	GREG           shift, and enter state 9
	BYTE           shift, and enter state 10

	PI             goto state 18

State 8

	PI -> LOC . GlobalVariables                         (rule 19)
	PI -> LOC . HEX                                     (rule 20)

	DS             shift, and enter state 16
	HEX            shift, and enter state 17

	GlobalVariablesgoto state 15

State 9

	PI -> GREG . AT                                     (rule 21)
	PI -> GREG . BYTE_LIT                               (rule 22)

	BYTE_LIT       shift, and enter state 13
	AT             shift, and enter state 14


State 10

	PI -> BYTE . Byte_Array                             (rule 23)

	STR            shift, and enter state 12

	Byte_Array     goto state 11

State 11

	PI -> BYTE Byte_Array .                             (rule 23)
	Byte_Array -> Byte_Array . COMMA STR                (rule 25)
	Byte_Array -> Byte_Array . COMMA BYTE_LIT           (rule 26)

	OP_CODE        reduce using rule 23
	COMMA          shift, and enter state 33
	ID             reduce using rule 23
	LOC            reduce using rule 23
	GREG           reduce using rule 23
	BYTE           reduce using rule 23
	%eof           reduce using rule 23


State 12

	Byte_Array -> STR .                                 (rule 24)

	OP_CODE        reduce using rule 24
	COMMA          reduce using rule 24
	ID             reduce using rule 24
	LOC            reduce using rule 24
	GREG           reduce using rule 24
	BYTE           reduce using rule 24
	%eof           reduce using rule 24


State 13

	PI -> GREG BYTE_LIT .                               (rule 22)

	OP_CODE        reduce using rule 22
	ID             reduce using rule 22
	LOC            reduce using rule 22
	GREG           reduce using rule 22
	BYTE           reduce using rule 22
	%eof           reduce using rule 22


State 14

	PI -> GREG AT .                                     (rule 21)

	OP_CODE        reduce using rule 21
	ID             reduce using rule 21
	LOC            reduce using rule 21
	GREG           reduce using rule 21
	BYTE           reduce using rule 21
	%eof           reduce using rule 21


State 15

	PI -> LOC GlobalVariables .                         (rule 19)

	OP_CODE        reduce using rule 19
	ID             reduce using rule 19
	LOC            reduce using rule 19
	GREG           reduce using rule 19
	BYTE           reduce using rule 19
	%eof           reduce using rule 19


State 16

	GlobalVariables -> DS .                             (rule 27)

	OP_CODE        reduce using rule 27
	ID             reduce using rule 27
	LOC            reduce using rule 27
	GREG           reduce using rule 27
	BYTE           reduce using rule 27
	%eof           reduce using rule 27


State 17

	PI -> LOC HEX .                                     (rule 20)

	OP_CODE        reduce using rule 20
	ID             reduce using rule 20
	LOC            reduce using rule 20
	GREG           reduce using rule 20
	BYTE           reduce using rule 20
	%eof           reduce using rule 20


State 18

	AssignmentLine -> ID PI .                           (rule 6)

	OP_CODE        reduce using rule 6
	ID             reduce using rule 6
	LOC            reduce using rule 6
	GREG           reduce using rule 6
	BYTE           reduce using rule 6
	%eof           reduce using rule 6


State 19

	AssignmentLine -> ID OP_CODE . TwoPartOperatorList    (rule 7)
	AssignmentLine -> ID OP_CODE . ThreePartOperatorList    (rule 8)

	HALT           shift, and enter state 24
	FPUTS          shift, and enter state 25
	STDOUT         shift, and enter state 26
	BYTE_LIT       shift, and enter state 27
	ID             shift, and enter state 28
	REG            shift, and enter state 29

	ThreePartOperatorListgoto state 31
	TwoPartOperatorListgoto state 32
	OperatorElementgoto state 22
	Identifier     goto state 23

State 20

	AssignmentLine -> OP_CODE ThreePartOperatorList .    (rule 5)

	OP_CODE        reduce using rule 5
	ID             reduce using rule 5
	LOC            reduce using rule 5
	GREG           reduce using rule 5
	BYTE           reduce using rule 5
	%eof           reduce using rule 5


State 21

	AssignmentLine -> OP_CODE TwoPartOperatorList .     (rule 4)

	OP_CODE        reduce using rule 4
	ID             reduce using rule 4
	LOC            reduce using rule 4
	GREG           reduce using rule 4
	BYTE           reduce using rule 4
	%eof           reduce using rule 4


State 22

	ThreePartOperatorList -> OperatorElement . COMMA OperatorElement COMMA OperatorElement    (rule 10)
	TwoPartOperatorList -> OperatorElement . COMMA Identifier    (rule 11)

	COMMA          shift, and enter state 30


State 23

	OperatorElement -> Identifier .                     (rule 17)

	OP_CODE        reduce using rule 17
	COMMA          reduce using rule 17
	ID             reduce using rule 17
	LOC            reduce using rule 17
	GREG           reduce using rule 17
	BYTE           reduce using rule 17
	%eof           reduce using rule 17


State 24

	OperatorElement -> HALT .                           (rule 13)

	OP_CODE        reduce using rule 13
	COMMA          reduce using rule 13
	ID             reduce using rule 13
	LOC            reduce using rule 13
	GREG           reduce using rule 13
	BYTE           reduce using rule 13
	%eof           reduce using rule 13


State 25

	OperatorElement -> FPUTS .                          (rule 14)

	OP_CODE        reduce using rule 14
	COMMA          reduce using rule 14
	ID             reduce using rule 14
	LOC            reduce using rule 14
	GREG           reduce using rule 14
	BYTE           reduce using rule 14
	%eof           reduce using rule 14


State 26

	OperatorElement -> STDOUT .                         (rule 15)

	OP_CODE        reduce using rule 15
	COMMA          reduce using rule 15
	ID             reduce using rule 15
	LOC            reduce using rule 15
	GREG           reduce using rule 15
	BYTE           reduce using rule 15
	%eof           reduce using rule 15


State 27

	OperatorElement -> BYTE_LIT .                       (rule 12)

	OP_CODE        reduce using rule 12
	COMMA          reduce using rule 12
	ID             reduce using rule 12
	LOC            reduce using rule 12
	GREG           reduce using rule 12
	BYTE           reduce using rule 12
	%eof           reduce using rule 12


State 28

	Identifier -> ID .                                  (rule 18)

	OP_CODE        reduce using rule 18
	COMMA          reduce using rule 18
	ID             reduce using rule 18
	LOC            reduce using rule 18
	GREG           reduce using rule 18
	BYTE           reduce using rule 18
	%eof           reduce using rule 18


State 29

	OperatorElement -> REG .                            (rule 16)

	OP_CODE        reduce using rule 16
	COMMA          reduce using rule 16
	ID             reduce using rule 16
	LOC            reduce using rule 16
	GREG           reduce using rule 16
	BYTE           reduce using rule 16
	%eof           reduce using rule 16


State 30

	ThreePartOperatorList -> OperatorElement COMMA . OperatorElement COMMA OperatorElement    (rule 10)
	TwoPartOperatorList -> OperatorElement COMMA . Identifier    (rule 11)

	HALT           shift, and enter state 24
	FPUTS          shift, and enter state 25
	STDOUT         shift, and enter state 26
	BYTE_LIT       shift, and enter state 27
	ID             shift, and enter state 28
	REG            shift, and enter state 29

	OperatorElementgoto state 36
	Identifier     goto state 37

State 31

	AssignmentLine -> ID OP_CODE ThreePartOperatorList .    (rule 8)

	OP_CODE        reduce using rule 8
	ID             reduce using rule 8
	LOC            reduce using rule 8
	GREG           reduce using rule 8
	BYTE           reduce using rule 8
	%eof           reduce using rule 8


State 32

	AssignmentLine -> ID OP_CODE TwoPartOperatorList .    (rule 7)

	OP_CODE        reduce using rule 7
	ID             reduce using rule 7
	LOC            reduce using rule 7
	GREG           reduce using rule 7
	BYTE           reduce using rule 7
	%eof           reduce using rule 7


State 33

	Byte_Array -> Byte_Array COMMA . STR                (rule 25)
	Byte_Array -> Byte_Array COMMA . BYTE_LIT           (rule 26)

	BYTE_LIT       shift, and enter state 34
	STR            shift, and enter state 35


State 34

	Byte_Array -> Byte_Array COMMA BYTE_LIT .           (rule 26)

	OP_CODE        reduce using rule 26
	COMMA          reduce using rule 26
	ID             reduce using rule 26
	LOC            reduce using rule 26
	GREG           reduce using rule 26
	BYTE           reduce using rule 26
	%eof           reduce using rule 26


State 35

	Byte_Array -> Byte_Array COMMA STR .                (rule 25)

	OP_CODE        reduce using rule 25
	COMMA          reduce using rule 25
	ID             reduce using rule 25
	LOC            reduce using rule 25
	GREG           reduce using rule 25
	BYTE           reduce using rule 25
	%eof           reduce using rule 25


State 36

	ThreePartOperatorList -> OperatorElement COMMA OperatorElement . COMMA OperatorElement    (rule 10)

	COMMA          shift, and enter state 38


State 37

	TwoPartOperatorList -> OperatorElement COMMA Identifier .    (rule 11)
	OperatorElement -> Identifier .                     (rule 17)

	OP_CODE        reduce using rule 11
	COMMA          reduce using rule 17
	ID             reduce using rule 11
	LOC            reduce using rule 11
	GREG           reduce using rule 11
	BYTE           reduce using rule 11
	%eof           reduce using rule 11


State 38

	ThreePartOperatorList -> OperatorElement COMMA OperatorElement COMMA . OperatorElement    (rule 10)

	HALT           shift, and enter state 24
	FPUTS          shift, and enter state 25
	STDOUT         shift, and enter state 26
	BYTE_LIT       shift, and enter state 27
	ID             shift, and enter state 28
	REG            shift, and enter state 29

	OperatorElementgoto state 39
	Identifier     goto state 23

State 39

	ThreePartOperatorList -> OperatorElement COMMA OperatorElement COMMA OperatorElement .    (rule 10)

	OP_CODE        reduce using rule 10
	ID             reduce using rule 10
	LOC            reduce using rule 10
	GREG           reduce using rule 10
	BYTE           reduce using rule 10
	%eof           reduce using rule 10


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 28
Number of terminals: 15
Number of non-terminals: 11
Number of states: 40
